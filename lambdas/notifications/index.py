import base64
import zlib
import json
import requests
import os
import re

discord_webhook_url = os.getenv('DISCORD_WEBHOOK_URL')
teams_webhook_url = os.getenv('TEAMS_WEBHOOK_URL')
log_level = os.getenv('LOG_LEVEL', 'INFO') 

def send_discord_message(discord_webhook_url, title, message, color):
  payload = {
    "embeds": [
      {
        "title": title,
        "description": message,
        "color": color
      }
    ]
  }
  headers = {'Content-Type': 'application/json'}
  response = requests.post(discord_webhook_url, data=json.dumps(payload), headers=headers)
  if response.status_code != 204:
    print(f"Failed to send Discord message. Status code: {response.status_code}")
  else:
    print("Discord message sent successfully.")

def send_teams_message(teams_webhook_url, title, message, color):
    def int_to_hex_color(color):
        return format(color, '06x')

    message = f"<pre>{message}</pre>"
        
    payload = {
        "@type": "MessageCard",
        "@context": "https://schema.org/extensions",
        "summary": title,
        "themeColor": int_to_hex_color(color),
        "title": title,
        "text": message
    }

    headers = {'Content-Type': 'application/json'}
    response = requests.post(teams_webhook_url, data=json.dumps(payload), headers=headers)
    
    if response.status_code != 204 and response.status_code != 200:
        raise Exception(f"Failed to send Teams message. Status code: {response.status_code}, response: {response.text}")
    else:
        print("Teams message sent successfully.")

def lambda_handler(event, context):
  # Message Decode
  if log_level == 'DEBUG':
    print("Event Raw:")
    print(event)
    
  input_data = event['awslogs']['data']
  payload = base64.b64decode(input_data)
  result = zlib.decompress(payload, 16 + zlib.MAX_WBITS)
  result = json.loads(result.decode('utf-8'))

  if log_level == 'DEBUG':
    print("Event Data:", json.dumps(result, indent=2))
    # Examples of this print in folder examples

  # Capture the logGroup field
  log_group = result['logGroup']  # Get the value of the logGroup field

  # Loop through the line of events that have arrived at the lambda (they arrive in an array)
  for log_event in result['logEvents']:
    additional_info = ""
    event_id = log_event['id']
    timestamp = log_event['timestamp']
    event_timestamp = timestamp
    
    try:
      # CAPTURE THE JSON MESSAGE GENERATED BY THE APP TO PATCH IT
      event_message = json.loads(log_event['message'])

      # EXTRACT FIELDS THAT I AM GOING TO USE
      event_level = event_message['level']  # Extract the 'level' field from the message
      event_text = event_message['message']  # Extract the 'message' field from the message
      if '@timestamp' in event_message:
          event_timestamp = event_message['@timestamp']
      if 'sourceFile' in event_message:
          additional_info += f"\nSource File: {event_message['sourceFile']}"
      if 'stack_trace' in event_message:
          additional_info += f"\nStack Trace: {event_message['stack_trace']}"

    except json.JSONDecodeError as e:
      # Regular expression pattern to extract level, date, request ID, and message
      # Ej.: [INFO]	2023-11-26T00:00:48.317Z	bb070c69-36ef-4c25-be04-16c5a9128f0d	Executing query: CREATE DATABASE IF NOT EXISTS mydb1 CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci
      pattern = re.compile(r'\[([A-Z]+)\]\s+(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+Z)\s+(\S+)\s+((?:.*\n?)*)')
      matches = pattern.findall(log_event['message'])
      additional_info = ""

      # Check if matches were found
      if matches:
        for match in matches:
          event_level, event_timestamp, event_requestid, event_text = match
      else:
        # It will be executed if no matches were found, it is sent as debug
        event_level = "DEBUG"
        event_timestamp = event_timestamp # Take the default log_group
        event_requestid = "null"
        event_text = log_event['message']

    # BUILDS VARIABLES
    title = f"{event_timestamp} | {event_level} - {log_group}"
    message = f"{event_text}{additional_info}"

    # LOG FROM LAMBDA
    print (f"{title}")
    print (f"{message}")

    # APPLY COLORS TO THE MESSAGE ACCORDING TO THE LEVEL
    if event_level == 'ERROR':
        color = 16711680  # Red color
    elif event_level == 'WARN':
        color = 16753920  # Orange color
    elif event_level == 'DEBUG':
        color = 16776960  # Yellow color
    else:
        color = 65280  # Green color

    # SEND MESSAGE
    if discord_webhook_url:
        send_discord_message(discord_webhook_url, title, message, color)
    if teams_webhook_url:
        send_teams_message(teams_webhook_url, title, message, color)